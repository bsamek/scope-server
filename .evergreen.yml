#######################################################################################
# scout-server Evergreen CI configuration
#
# References:
# https://github.com/evergreen-ci/evergreen/wiki/Project-Files
# https://github.com/evergreen-ci/evergreen/blob/master/config_dev/project/sample.yml
#######################################################################################

stepback: false

pre:
- command: shell.track

post:
- command: shell.cleanup

#######################################
#            Functions                #
#######################################

functions:
  "fetch source" :
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src

  "fetch npm tarball" :
    - command: shell.exec
      params:
        working_dir: src
        script: |
          mkdir .deps
    - command: s3.get
      params:
        aws_key: ${aws_key_evergreen_integrations}
        aws_secret: ${aws_secret_evergreen_integrations}
        bucket: mongodb-dx-public
        remote_file: evergreen-deps/${fetch_npm_tarball}
        local_file: src/.deps/${fetch_npm_tarball}
    - command: shell.exec
      params:
        working_dir: src/.deps
        script: |
          set -ev
          tar xzf ${fetch_npm_tarball} --strip-components=1
          ls

  # THIS COMMAND WORKS ON WINDOWS ONLY, SHOULD BE CONSIDERED OBSOLETE
  "upgrade npm windows" :
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -ev
          test -n "${add_environment|}" && export "${add_environment|}"
          export PATH="$PATH:${node_path|}"
          if [ -z "${npm_version|}" ]
          then
            echo "upgrade_npm: npm_version is unset; skipping"
            exit 0
          fi
          ${npm|npm} install -g npm@${npm_version|xx}

  "npm install" :
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -ev
          test -n "${add_environment|}" && export "${add_environment|}"
          export PATH="$PATH:${node_path|}"
          export PATH="`npm -g bin`:$PATH"
          ${node|node} --version
          ${npm|npm} --version
          ${npm|npm} config set loglevel error
          ${npm|npm} config -g list -l
          ${npm|npm} install

  "npm run ci" :
    - command: shell.exec
      params:
        working_dir: src
        continue_on_err: false
        script: |
          set -ev
          test -n "${add_environment|}" && export "${add_environment|}"
          export PATH="$PATH:${node_path|}"
          export PATH="`npm -g bin`:$PATH"
          ${npm|npm} run check
          ${npm|npm} run ci -- -- -- -R mocha-evergreen-reporter || true
          ${npm|npm} run posttest || true
    - command: attach.results
      params:
        file_location: src/report.json

  # "npm release" :
  #   - command: shell.exec
  #     params:
  #       working_dir: src
  #       script: |
  #         set -o errexit
  #         set -o verbose
  #         export PATH="$PATH:${add_path|}"
  #         test -n "${add_environment|}" && export "${add_environment|}"
  #         ${npm|npm} run release

#######################################
#               Tasks                 #
#######################################

# FIXME: simplify to one "compile" task as soon as we can hammer out the irregularities
# between the platforms:
# - one way of installing Node
# - build artifacts for all platforms

tasks:
- name: compile
  depends_on: []
  commands:
  - func: "fetch source"
  - func: "fetch npm tarball"
  - func: "npm install"
  - func: "npm run ci"

- name: compile_windows
  depends_on: []
  commands:
  - func: "fetch source"
  - func: "upgrade npm windows"
  - func: "npm install"
  - func: "npm run ci"


#######################################
#           Buildvariants             #
#######################################

buildvariants:
- name: osx-108
  display_name: OS X 10.8
  modules: ~
  run_on:
  - "osx-108"
  expansions:
    fetch_npm_tarball: node-v0.12.7-npm-3.3.5-darwin-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    installer_content_type: "application/x-apple-diskimage"
    installer_filename: "MongoDB Compass.dmg"
    num_cores: $(sysctl -n hw.logicalcpu)
  tasks:
  - name: compile

- name: windows-64
  display_name: Windows 64-bit
  modules: ~
  run_on:
  - "windows-64-vs2013-test"
  expansions:
    add_environment: "APPDATA=C:\\Program Files (x86)\\nodejs\\node_modules"
    npm_version: "3"
    node_path: "/cygdrive/c/Program Files (x86)/nodejs"
    installer_content_type: "application/octet-stream"
    installer_filename: "MongoDBCompassSetup.exe"
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
  - name: compile_windows

- name: ubuntu
  display_name: Ubuntu 14.04
  modules: ~
  run_on:
  - "ubuntu1404-test"
  expansions:
    fetch_npm_tarball: node-v0.12.7-npm-3.3.5-linux-x64.tar.gz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
  - name: compile
